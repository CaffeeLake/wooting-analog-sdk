[env]
CARGO_MAKE_EXTEND_WORKSPACE_MAKEFILE = "true"
LIBRARY_EXTENSION = { source = "${CARGO_MAKE_RUST_TARGET_OS}", default_value = "unknown", mapping = {"linux" = "so", "macos" = "dylib", "windows" = "dll", "openbsd" = "so" } }
LIBRARY_PREFIX = { source = "${CARGO_MAKE_RUST_TARGET_OS}", default_value = "unknown", mapping = {"linux" = "lib", "macos" = "lib", "windows" = "", "openbsd" = "lib" } }
TEST_PLUGIN_FILENAME="wooting_analog_test_plugin"
# We want to skip the updater on non-windows platforms as it's just designed for windows
CARGO_MAKE_WORKSPACE_SKIP_MEMBERS = { source = "${CARGO_MAKE_RUST_TARGET_OS}", default_value = "", mapping = { "linux" = "wooting-analog-sdk-updater", "macos" = "wooting-analog-sdk-updater" } }

[tasks.build]
dependencies = [ "cargo-args"]

[tasks.cargo-args]
condition = { env_set = [ "CARGO_TARGET" ] }
env = { CARGO_ARGS="--target ${CARGO_TARGET}" }
script = [
    "echo var: ${CARGO_TARGET}"
]

[tasks.test-app]
env = { PATH="${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/target/debug;${PATH}", LD_LIBRARY_PATH="${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/target/debug:${LD_LIBRARY_PATH}", RUST_LOG="trace" }
command = "dotnet"
args = [ "run", "--project", "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/wooting-analog-test" ]
dependencies = [ "build", "install-plugin" ]

[tasks.gen-headers]

[tasks.verify-headers]

[tasks.virtual-kb]
workspace = false
command="cargo"
args = ["run", "--manifest-path", "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/wooting-analog-virtual-control/Cargo.toml"]

[tasks.install-plugin]

[tasks.build-target-release]
workspace = false
description = "Makes a release build for a given target"
condition = { env_set = [ "TARGET" ]}
command = "cargo"
args = [
  "build",
  "--release",
  "--all-features",
  "--target",
  "${TARGET}",
  "--out-dir",
  "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/target/release-artifacts",
  "-Z",
  "unstable-options"
]

[tasks.build-deb]
dependencies = [ "build-target-release" ]